{"mappings":"AAAA,iCAAiC;AAEjC,SAAS,cAAc,KAAK,EAAE,MAAM;IAClC,QAAQ,IAAI,OAAO;IACnB,IAAI,OAAO,SAAS,UAAU;QAC5B,IAAI,OAAO,aAAa,OAAO,SAAS,OAAO,WAC7C,OAAO,CAAC,sBAAsB,EAAE,OAAO,UAAU,WAAW,CAAC;QAE/D,IAAI,OAAO,WAAW,CAAC,OAAO,QAAQ,KAAK,QACzC,OAAO;QAET,IAAI,OAAO,MACT,OAAO,CAAC,OAAO,KAAK,SAAS,SAAS,CAAC,yBAAyB,EAAE,OAAO,KAAK,OAAO,CAAC,GAAG;QAE3F,IAAI,OAAO,QACT,OAAO,OAAO,WAAW,OAAO,SAAS,CAAC,wBAAwB,EAAE,OAAO,OAAO,WAAW,CAAC,GAAG;IAErG;IAEA,IAAI,OAAO,SAAS,SAAS;QAC3B,0CAA0C;QAC1C,iDAAiD;QACjD,MAAM,eAAe;QACrB,OAAO,aAAa,KAAK;IAC3B;IAEA,OAAO;AACT;AAEA,SAAS,iBAAiB,IAAI;IAC5B,MAAM,SAAS;QACb,cAAc;YACZ,MAAM;YACN,WAAW;YACX,SAAS;QACX;QACA,aAAa;YACX,MAAM;YACN,WAAW;YACX,SAAS;QACX;QACA,UAAU;YACR,MAAM;YACN,WAAW;YACX,SAAS;QACX;QACA,QAAQ;YACN,MAAM;YACN,MAAM;gBAAC;gBAAQ;gBAAU;gBAAS;aAAoB;QACxD;QACA,cAAc;YACZ,MAAM;YACN,QAAQ;YACR,SAAS;QACX;QACA,OAAO;YACL,MAAM;YACN,QAAQ;QACV;IACF;IAEA,IAAI,SAAS;IAEb,OAAO,KAAK,QAAQ,QAAQ,CAAC;QAC3B,MAAM,cAAc,MAAM,CAAC,MAAM;QACjC,QAAQ,IAAI,IAAI,CAAC,MAAM;QACvB,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM;QAChD,QAAQ,IAAI;QAEZ,OAAO,YAAY;QACnB,OAAO,YAAY;QAEnB,IAAI,CAAC,OAAO;YACV,OAAO,YAAY;YACnB,OAAO,YAAY;YACnB,UAAU;YACV;QACF;QAEA,MAAM,KAAK,cAAc,OAAO;QAChC,IAAI,IAAI;YACN,OAAO,YAAY;YACnB,OAAO,YAAY;YACnB,UAAU;QACZ;IACF;IAEA,OAAO,CAAC,CAAC;AACX;AAEA,IAAI,OAAO,WAAW,aACpB,OAAO,mBAAmB","sources":["pages/js/registerValidate.js"],"sourcesContent":["// beware! horrid code lies below\n\nfunction validateField(value, schema) {\n  console.log(value, schema);\n  if (schema.type === \"string\") {\n    if (schema.minLength && value?.length < schema.minLength) {\n      return `must contain at least ${schema.minLength} characters`;\n    }\n    if (schema.pattern && !schema.pattern.test(value)) {\n      return \"has invalid data type.\";\n    }\n    if (schema.enum) {\n      return !schema.enum.includes(value) ? `must be equal to one of: ${schema.enum.join()}` : \"\";\n    }\n    if (schema.length) {\n      return value?.length !== schema.length ? `length must be equal to ${schema.length} characters` : \"\";\n    }\n  }\n\n  if (schema.type === \"email\") {\n    // You can implement email validation here\n    // For a basic check, you can use a regex pattern\n    const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailPattern.test(value);\n  }\n\n  return undefined;\n}\n\nfunction registerValidate(data) {\n  const schema = {\n    \"first-name\": {\n      type: \"string\",\n      minLength: 3,\n      pattern: /^[a-zA-Z\\s]*$/, // letters a-Z upper/lower, whitespace\n    },\n    \"last-name\": {\n      type: \"string\",\n      minLength: 3,\n      pattern: /^[a-zA-Z\\s]*$/, // letters a-Z upper/lower, whitespace\n    },\n    username: {\n      type: \"string\",\n      minLength: 3,\n      pattern: /^[a-zA-Z0-9]*$/, // letters a-z upper/lower, 0-9\n    },\n    gender: {\n      type: \"string\",\n      enum: [\"male\", \"female\", \"other\", \"prefer_not_to_say\"],\n    },\n    \"birth-date\": {\n      type: \"string\",\n      length: 10,\n      pattern: /^\\d\\d\\/\\d\\d\\/\\d\\d\\d\\d$/,\n    },\n    email: {\n      type: \"string\",\n      format: \"email\",\n    },\n  };\n\n  let errors = 0;\n\n  Object.keys(schema).forEach((field) => {\n    const fieldSchema = schema[field];\n    console.log(data[field]);\n    const { field: { value }, helper } = data[field];\n    console.log(value);\n\n    helper.innerText = \"\";\n    helper.className = \"\";\n\n    if (!value) {\n      helper.innerText = \"this field is required\";\n      helper.className = \"form-helper-text danger\";\n      errors += 1;\n      return;\n    }\n\n    const vf = validateField(value, fieldSchema);\n    if (vf) {\n      helper.innerText = vf;\n      helper.className = \"form-helper-text danger\";\n      errors += 1;\n    }\n  });\n\n  return !!errors;\n}\n\nif (typeof window !== \"undefined\") {\n  window.registerValidate = registerValidate;\n}\n"],"names":[],"version":3,"file":"register.f0c45ee1.js.map"}